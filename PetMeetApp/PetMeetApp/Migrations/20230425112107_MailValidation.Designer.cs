// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetMeetApp;

#nullable disable

namespace PetMeetApp.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230425112107_MailValidation")]
    partial class MailValidation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetMeetApp.Models.AchievementModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AchievementType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgressIncrement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("PetMeetApp.Models.ChatModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserReceiver")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSender")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("PetMeetApp.Models.CommentModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PetMeetApp.Models.ContentTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("PetMeetApp.Models.EmailValidation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailValidations");
                });

            modelBuilder.Entity("PetMeetApp.Models.FirebaseAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("FirebaseAccessTokens");
                });

            modelBuilder.Entity("PetMeetApp.Models.FollowingRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FollowedId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("PetMeetApp.Models.ForgotPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForgotPasswords");
                });

            modelBuilder.Entity("PetMeetApp.Models.LikeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("PetMeetApp.Models.LostPetModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LostPets");
                });

            modelBuilder.Entity("PetMeetApp.Models.NotificationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChatModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentModelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FollowingRelationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LostPetModelId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<long>("UserReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserSenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatModelId")
                        .IsUnique()
                        .HasFilter("[ChatModelId] IS NOT NULL");

                    b.HasIndex("CommentModelId")
                        .IsUnique()
                        .HasFilter("[CommentModelId] IS NOT NULL");

                    b.HasIndex("FollowingRelationId")
                        .IsUnique()
                        .HasFilter("[FollowingRelationId] IS NOT NULL");

                    b.HasIndex("LikeModelId")
                        .IsUnique()
                        .HasFilter("[LikeModelId] IS NOT NULL");

                    b.HasIndex("LostPetModelId")
                        .IsUnique()
                        .HasFilter("[LostPetModelId] IS NOT NULL");

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PetMeetApp.Models.PetModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("PetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetMeetApp.Models.PetTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PetTypes");
                });

            modelBuilder.Entity("PetMeetApp.Models.PostData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AWSKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContentTypeModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeModelId");

                    b.HasIndex("PostId");

                    b.ToTable("PostData");
                });

            modelBuilder.Entity("PetMeetApp.Models.PostModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CommentsAllowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserAchievementModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("int");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserPetRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPetRelation");
                });

            modelBuilder.Entity("PetMeetApp.Models.CommentModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PetMeetApp.Models.FirebaseAccessToken", b =>
                {
                    b.HasOne("PetMeetApp.Models.UserModel", "UserModel")
                        .WithMany("FirebaseAccessTokens")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("PetMeetApp.Models.FollowingRelation", b =>
                {
                    b.HasOne("PetMeetApp.Models.UserModel", "Followed")
                        .WithMany("Following")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.UserModel", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("PetMeetApp.Models.ForgotPassword", b =>
                {
                    b.HasOne("PetMeetApp.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetMeetApp.Models.LikeModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.PostModel", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PetMeetApp.Models.NotificationModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.ChatModel", "ChatModel")
                        .WithOne("NotificationModel")
                        .HasForeignKey("PetMeetApp.Models.NotificationModel", "ChatModelId");

                    b.HasOne("PetMeetApp.Models.CommentModel", "CommentModel")
                        .WithOne("NotificationModel")
                        .HasForeignKey("PetMeetApp.Models.NotificationModel", "CommentModelId");

                    b.HasOne("PetMeetApp.Models.FollowingRelation", "FollowingRelation")
                        .WithOne("NotificationModel")
                        .HasForeignKey("PetMeetApp.Models.NotificationModel", "FollowingRelationId");

                    b.HasOne("PetMeetApp.Models.LikeModel", "LikeModel")
                        .WithOne("NotificationModel")
                        .HasForeignKey("PetMeetApp.Models.NotificationModel", "LikeModelId");

                    b.HasOne("PetMeetApp.Models.LostPetModel", "LostPetModel")
                        .WithOne("NotificationModel")
                        .HasForeignKey("PetMeetApp.Models.NotificationModel", "LostPetModelId");

                    b.HasOne("PetMeetApp.Models.UserModel", "UserReceiver")
                        .WithMany("NotificationsReceiver")
                        .HasForeignKey("UserReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.UserModel", "UserSender")
                        .WithMany("NotificationsSender")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatModel");

                    b.Navigation("CommentModel");

                    b.Navigation("FollowingRelation");

                    b.Navigation("LikeModel");

                    b.Navigation("LostPetModel");

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("PetMeetApp.Models.PetModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.PetTypeModel", "PetType")
                        .WithMany("Pets")
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("PetMeetApp.Models.PostData", b =>
                {
                    b.HasOne("PetMeetApp.Models.ContentTypeModel", "ContentTypeModel")
                        .WithMany("PostData")
                        .HasForeignKey("ContentTypeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.PostModel", "Post")
                        .WithMany("PostData")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentTypeModel");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PetMeetApp.Models.PostModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.PetModel", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserAchievementModel", b =>
                {
                    b.HasOne("PetMeetApp.Models.AchievementModel", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserPetRelation", b =>
                {
                    b.HasOne("PetMeetApp.Models.PetModel", "Pet")
                        .WithMany("Users")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetMeetApp.Models.UserModel", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetMeetApp.Models.ChatModel", b =>
                {
                    b.Navigation("NotificationModel");
                });

            modelBuilder.Entity("PetMeetApp.Models.CommentModel", b =>
                {
                    b.Navigation("NotificationModel");
                });

            modelBuilder.Entity("PetMeetApp.Models.ContentTypeModel", b =>
                {
                    b.Navigation("PostData");
                });

            modelBuilder.Entity("PetMeetApp.Models.FollowingRelation", b =>
                {
                    b.Navigation("NotificationModel");
                });

            modelBuilder.Entity("PetMeetApp.Models.LikeModel", b =>
                {
                    b.Navigation("NotificationModel")
                        .IsRequired();
                });

            modelBuilder.Entity("PetMeetApp.Models.LostPetModel", b =>
                {
                    b.Navigation("NotificationModel");
                });

            modelBuilder.Entity("PetMeetApp.Models.PetModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PetMeetApp.Models.PetTypeModel", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetMeetApp.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostData");
                });

            modelBuilder.Entity("PetMeetApp.Models.UserModel", b =>
                {
                    b.Navigation("FirebaseAccessTokens");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("NotificationsReceiver");

                    b.Navigation("NotificationsSender");

                    b.Navigation("Pets");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
